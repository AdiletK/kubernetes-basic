apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.customNamespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-db-config
  namespace: {{ .Values.customNamespace }}
data:
  init.sql: |
    CREATE DATABASE users;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-datasource-url-config
  namespace: {{ .Values.customNamespace }}
  labels:
    app: user-configmap
    {{- template "configmap.labels"}}
data:
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/users
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: {{ .Values.customNamespace }}
type: Opaque
data:
  SPRING_DATASOURCE_USERNAME: postgres
  SPRING_DATASOURCE_PASSWORD: postgres
---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: {{ .Values.customNamespace }}
type: Opaque
data:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: user-pv-volume
spec:
  storageClassName: standard
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/user"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: user-pv-claim
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---


apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: {{ .Values.customNamespace }}
  labels:
    app: postgresql
    tier: database
spec:
  type: LoadBalancer
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgresql
    tier: database

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: {{ .Values.customNamespace }}
  labels:
    app: postgresql
    tier: database
spec:
  selector:
    matchLabels:
      app: postgresql
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: postgresql
        tier: database
    spec:
      containers:
        - name: postgresql
          image: postgres:13.1-alpine
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 15
            periodSeconds: 20
          envFrom:
            - configMapRef:
                name: user-db-config
            - secretRef:
                name: db-secret
          volumeMounts:
            - name: sql-initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: sql-storage
              mountPath: "/var/lib/postgresql/data"
          ports:
            - containerPort: 5432
              name: postgresql
      volumes:
        - name: sql-initdb
          configMap:
            name: user-db-config
        - name: sql-storage
          persistentVolumeClaim:
            claimName: user-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: {{ .Values.customNamespace }}
spec:
  type: LoadBalancer
  selector:
    app: user-service-pod
  ports:
    - protocol: "TCP"
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: {{ .Values.customNamespace }}
spec:
  selector:
    matchLabels:
      app: user-service
  strategy:
    type: RollingUpdate
  replicas: {{ .Values.replicaCount}}
  template:
    metadata:
      labels:
        app: user-service
        owner: adiletk
    spec:
      containers:
        - name: user-service
          image: adiletk/user-service:1.0.3
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 5
          envFrom:
            - configMapRef:
                name: user-service-datasource-url-config
            - secretRef:
                name: app-secret
          ports:
            - containerPort: 8080